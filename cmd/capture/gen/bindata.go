// Code generated by go-bindata.
// sources:
// skeleton.ank
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _skeletonAnk = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\xcd\x6a\xeb\x30\x10\x85\xd7\xd2\x53\x08\xad\x24\x08\xe6\xbe\x80\x17\x21\xb9\x4d\x0b\xa1\x8b\xe0\xd0\x45\x29\x45\xc8\xe3\xca\x10\x6b\xda\xf1\x18\x52\x4a\xde\xbd\x58\x76\xd2\xbf\x2c\x62\x4a\xb7\x47\x87\xf3\x7d\x92\xc8\x67\x77\x35\x87\x25\x36\xae\x8e\x46\x6b\x2b\xc9\x67\xd7\xd8\x40\x8a\xe7\x1d\x07\x24\x53\x75\xd1\x1b\x47\x4f\xad\x7d\x93\xa2\x44\xaf\x72\x55\xe0\x0a\x5f\x3a\xa0\xd7\x25\x0e\x47\xf7\xff\x1e\xac\x94\xa2\x85\x1d\x78\x46\x52\xb9\xd2\x5a\x0a\x97\x06\x54\xae\x4a\xf4\xd9\x55\x1d\x4b\x73\x2c\xd8\xac\x80\x3d\x1b\x2b\xc5\x06\xb8\xa3\x68\x86\xaa\x95\x87\xaf\x0a\xb7\xae\x81\x4f\x02\x6a\xaa\x41\x74\x0d\x5c\xc4\xef\x8b\x3f\xe8\x37\xb1\x84\xfd\x76\xb3\x9e\x64\x10\xb0\x81\xed\x66\x3d\x7b\x54\xb9\x5a\x01\x1b\x3d\x06\xfa\x03\x36\x26\x89\xd7\x03\x13\x27\x11\x17\xc1\x3d\x33\xd0\x54\xe6\xb7\x5b\x9f\xb9\xee\x7f\xe7\xc3\x30\x59\xcf\x86\x45\x11\x08\xaa\x64\xd9\x66\x73\x66\x32\xba\x0f\x7a\x4b\x71\xf2\x24\xa8\xac\x14\x87\x93\xe8\xa8\x97\x54\x8b\x9a\x77\xbf\xfa\x1b\xee\x07\x2e\xfa\x9c\xd4\x3c\x2b\xb1\xc0\xc8\x10\xf9\xef\x1f\x6b\x34\x69\x47\x35\x2b\x8e\xcf\xf2\x1e\x00\x00\xff\xff\xda\x9e\xa6\x4e\x43\x03\x00\x00")

func skeletonAnkBytes() ([]byte, error) {
	return bindataRead(
		_skeletonAnk,
		"skeleton.ank",
	)
}

func skeletonAnk() (*asset, error) {
	bytes, err := skeletonAnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "skeleton.ank", size: 835, mode: os.FileMode(436), modTime: time.Unix(1474616693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"skeleton.ank": skeletonAnk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"skeleton.ank": &bintree{skeletonAnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
